// AI-powered company enrichment with Cloudflare geo + mini-search-preview strict schema
  app.post("/api/enrich-company", async (req, res) => {
    try {
      const companyName = (req.body?.companyName || "").trim();

      console.log("üîç Company enrichment request for:", companyName);

      if (companyName.length < 3) {
        console.log("‚è≠Ô∏è Company name too short, skipping enrichment");
        return res.json(blankProfile());
      }

      const openaiApiKey = process.env.OPENAI_API_KEY;
      if (!openaiApiKey) {
        console.error("‚ùå OPENAI_API_KEY not configured");
        return res.json(blankProfile());
      }

      // Extract Cloudflare geo headers
      const { ip, city, state, country } = readCFGeo(req);
      console.log("üåç Cloudflare geo-context:", { ip, city, state, country });

      // Build geo context for prompt (US-only prioritization)
      const geoContext =
        country === "US" && (city || state)
          ? `Approx user location: ${[city, state].filter(Boolean).join(", ")} (US). When disambiguating similar names, prefer entities near this area.`
          : `Approx user location unknown.`;
      console.log("üìù Geo context for prompt:", geoContext);
      // Strict system prompt for US-only enrichment (developer role for gpt-5-search-api)
      const systemPrompt = [
        "Begin with a concise checklist (3‚Äì7 bullets) of what you will do; keep items conceptual, not implementation-level.",
        "",
        "Return a single US business profile as a JSON object conforming exactly to the provided JSON Schema and field order.",
        "",
        "- Search and confirm the business's existence using US sources ONLY. Do not consider companies located in other countries, regardless of name similarity.",
        "- Rely exclusively on official and authoritative sources, with the following priority:",
        "    1. The company's official website",
        "    2. US state or government business registries",
        "    3. Verified business listing platforms",
        "- Do NOT use generic directories unless none of the above are available.",
        "- If a company has multiple locations, use only the primary or official business address; do not include branch or subsidiary locations.",
        "- In cases of conflicting data, select information from the most authoritative and recently updated source (prefer sources updated within the last 12 months). If no clarity is achieved, set the field to null.",
        "- If no US business exists with the given name or no official/authoritative US sources can be found, return a JSON object with ALL fields set to null.",
        "",
        "Before answering:",
        "- Think step-by-step through each source you consult, how you verify US relevance, and how you resolve ambiguous or conflicting data.",
        '- Summarize your chain of reasoning in a "reasoning" field at the end of the object.',
        "",
        "After producing the JSON object, validate that all fields meet the schema and order constraints, and that no extra properties are present. If any error is detected, self-correct and reissue the output.",
        "",
        "The JSON response must:",
        "- Be strictly valid per the schema: every required field present, each value matching its regex/pattern constraints, absolutely no extra properties, and the exact field order as shown below.",
        "- Be output as a single, compact JSON object, with no comments or explanations outside of the \"reasoning\" field.",
        "",
        "---",
        "",
        "## Output Format",
        "Format your answer as follows, maintaining this precise structure and order:",
        "",
        "{",
        '  "website": "string|null (must start with https:// if not null, uri format)",',
        '  "instagramHandle": "string|null (must start with @ if not null)",',
        '  "businessAddress": "string|null",',
        '  "businessAddress2": "string|null",',
        '  "city": "string|null",',
        '  "state": "string|null (2 upper-case letter state code, e.g., \'NY\')",',
        '  "zipCode": "string|null (5 or 9 digit US zip: \'12345\' or \'12345-6789\')",',
        '  "phone": "string|null (must match US phone pattern: (999) 999-9999)",',
        '  "reasoning": "string (1‚Äì3 sentence summary explaining the sources checked, how ties or ambiguities were resolved, and noting any fields left null)"',
        "}",
        "",
        "Field constraints:",
        '- "website": null or a string starting with "https://" (valid URI format).',
        '- "instagramHandle": null or a string starting with "@", with valid Instagram characters only and no spaces.',
        '- "state": null or exactly two uppercase letters representing a valid US state code.',
        '- "zipCode": null or US ZIP code: either five digits (e.g., "12345") or five-plus-four digits with hyphen (e.g., "12345-6789").',
        '- "phone": null or a string matching the US phone format "(999) 999-9999", with correct punctuation and spacing.',
        "- Fields must appear in the exact order shown, with no additional properties included.",
        "",
        'If no official or authoritative US source is found, or if the business does not exist in the US, set all fields to null and explain this in the "reasoning" field.',
        "",
        'Ensure "reasoning" appears as the final field in the output object.',
        "",
        geoContext,
      ].join("\n");

      const userPrompt = [
        `Company to research: "${companyName}"`,
        "Please quickly find reliable results for the business name you are given.",
        "Return ONE US business profile as JSON that EXACTLY matches the provided JSON Schema.",
        "Search US sources ONLY. If no US match exists, set ALL fields to null.",
        "Prefer official sources (company site > state registries > verified platforms) over directories.",
        "If conflicting info, pick the most authoritative AND freshest source; otherwise null.",
        "If you encounter a non-US entity with the same/similar name, IGNORE it and keep searching for a US entity.",
        "Search the web for current, real data. If website is found on exact name match, retrieve Google Places or Maps data from search.",
        "Ensure address, phone, and zip are correct. Return ONLY the JSON.",
      ].join("\n");

      console.log(
        "üöÄ Calling OpenAI with gpt-5-search-api-2025-10-14 for real-time web search...",
      );

      const openaiResponse = await fetch(
        "https://api.openai.com/v1/chat/completions",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${openaiApiKey}`,
          },
          body: JSON.stringify({
            model: "gpt-4o-search-preview",
            response_format: { type: "text" },
            web_search_options: {
              search_context_size: "low",
              user_location: {
                type: "approximate",
                approximate: { country: "US" },
              },
            },
            store: true,
            messages: [
              {
                role: "developer",
                content: [{ type: "text", text: systemPrompt }],
              },
              {
                role: "user",
                content: [{ type: "text", text: userPrompt }],
              },
            ],
          }),
        },
      );

      console.log("üì° OpenAI API status:", openaiResponse.status);

      if (!openaiResponse.ok) {
        const errorText = await openaiResponse.text();
        console.error("‚ùå OpenAI API error:", errorText);
        return res.json(blankProfile());
      }

      const openaiData = await openaiResponse.json();
      console.log(
        "üì¶ OpenAI raw response:",
        JSON.stringify(openaiData, null, 2),
      );

      const responseContent = openaiData.choices?.[0]?.message?.content || "{}";
      console.log("üìù OpenAI content:", responseContent);

      // Structured Outputs guarantees valid JSON matching schema
      const enriched = JSON.parse(responseContent);
      console.log("‚úÖ Parsed enrichment data:", enriched);

      // Return only the profile fields (strip reasoning if present)
      return res.json({
        website: enriched.website || null,
        instagramHandle: enriched.instagramHandle || null,
        businessAddress: enriched.businessAddress || null,
        businessAddress2: enriched.businessAddress2 || null,
        city: enriched.city || null,
        state: enriched.state || null,
        zipCode: enriched.zipCode || null,
        phone: enriched.phone || null,
      });
    } catch (error) {
      console.error("‚ùå Company enrichment error:", error);
      return res.json(blankProfile());
    }
  });